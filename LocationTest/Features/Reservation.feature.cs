// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.7.0.0
//      SpecFlow Generator Version:3.7.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace LocationTest.Features
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.7.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [TechTalk.SpecRun.FeatureAttribute("Reservation", SourceFile="Features\\Reservation.feature", SourceLine=0)]
    public partial class ReservationFeature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
        private string[] _featureTags = ((string[])(null));
        
#line 1 "Reservation.feature"
#line hidden
        
        [TechTalk.SpecRun.FeatureInitialize()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Features", "Reservation", null, ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [TechTalk.SpecRun.FeatureCleanup()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        public virtual void TestInitialize()
        {
        }
        
        [TechTalk.SpecRun.ScenarioCleanup()]
        public virtual void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
        }
        
        public virtual void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        public virtual void FeatureBackground()
        {
#line 3
#line hidden
            TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                        "Prénom",
                        "Nom",
                        "Mot de passe",
                        "Date de naissance",
                        "Date obtention permis",
                        "Conduite Accompagnée",
                        "Numéro permis"});
            table2.AddRow(new string[] {
                        "Tristan",
                        "DA COSTA",
                        "azerty",
                        "2000-06-28",
                        "2020-02-03",
                        "true",
                        "911091204209"});
            table2.AddRow(new string[] {
                        "Eliott",
                        "DELANNAY",
                        "1234",
                        "2005-01-01",
                        "",
                        "false",
                        ""});
            table2.AddRow(new string[] {
                        "Aldrick",
                        "CLERET",
                        "5678",
                        "2000-01-31",
                        "",
                        "false",
                        "965412978369"});
            table2.AddRow(new string[] {
                        "John",
                        "Doe",
                        "uiop",
                        "1976-01-31",
                        "1990-01-01",
                        "false",
                        "156478964123"});
#line 4
 testRunner.Given("Init Client", ((string)(null)), table2, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {
                        "Marque",
                        "Modèle",
                        "Plaque d\'immatriculation",
                        "Couleur",
                        "Prix de réservation",
                        "Prix au Km",
                        "Chevaux Fiscaux",
                        "Reserver"});
            table3.AddRow(new string[] {
                        "Citroen",
                        "C4",
                        "AA-123-AA",
                        "Gris",
                        "50",
                        "0.12",
                        "7",
                        "false"});
            table3.AddRow(new string[] {
                        "Volkswagen",
                        "Golf",
                        "AA-456-AA",
                        "Bleu",
                        "50",
                        "0.15",
                        "6",
                        "false"});
            table3.AddRow(new string[] {
                        "Hyundai",
                        "Tucson",
                        "AA-789-AA",
                        "Noir",
                        "80",
                        "0.25",
                        "8",
                        "false"});
            table3.AddRow(new string[] {
                        "Ford",
                        "Mustang",
                        "AB-123-AA",
                        "Rouge",
                        "80",
                        "0.25",
                        "21",
                        "false"});
            table3.AddRow(new string[] {
                        "Audi",
                        "R8",
                        "AB-456-AA",
                        "Noir",
                        "100",
                        "1",
                        "50",
                        "false"});
            table3.AddRow(new string[] {
                        "Koenigsegg",
                        "Agera R",
                        "AB-789-AA",
                        "Blanc",
                        "200",
                        "8",
                        "139",
                        "false"});
#line 10
 testRunner.And("Init Vehicule", ((string)(null)), table3, "And ");
#line hidden
            TechTalk.SpecFlow.Table table4 = new TechTalk.SpecFlow.Table(new string[] {
                        "Prénom",
                        "Nom",
                        "Marque",
                        "Modèle",
                        "Plaque d\'immatriculation",
                        "Couleur",
                        "Date de début",
                        "Date de fin",
                        "Kms estimés",
                        "Kms réalisés"});
            table4.AddRow(new string[] {
                        "Tristan",
                        "DA COSTA",
                        "Volkswagen",
                        "Golf",
                        "AA-456-AA",
                        "Bleu",
                        "2022-03-05",
                        "2022-03-06",
                        "350",
                        "320"});
            table4.AddRow(new string[] {
                        "Tristan",
                        "DA COSTA",
                        "Hyundai",
                        "Tucson",
                        "AA-789-AA",
                        "Noir",
                        "2022-03-07",
                        "2022-03-09",
                        "180",
                        "210"});
            table4.AddRow(new string[] {
                        "Aldrick",
                        "CLERET",
                        "Citroen",
                        "C4",
                        "AA-123-AA",
                        "Gris",
                        "2022-03-07",
                        "2022-03-11",
                        "580",
                        "560"});
            table4.AddRow(new string[] {
                        "John",
                        "Doe",
                        "Koenigsegg",
                        "Agera R",
                        "AB-789-AA",
                        "Blanc",
                        "2022-03-11",
                        "2022-03-12",
                        "200",
                        "190"});
            table4.AddRow(new string[] {
                        "John",
                        "Doe",
                        "Audi",
                        "R8",
                        "AB-456-AA",
                        "Noir",
                        "2022-03-12",
                        "2022-03-13",
                        "200",
                        "220"});
#line 18
 testRunner.And("Init Reservation", ((string)(null)), table4, "And ");
#line hidden
        }
        
        public virtual void ReservationDunVehicule(string prenom, string nom, string motDePasse, string marque, string modele, string plaqueDimmatriculation, string couleur, string kmsEstimes, string retour, string kmsRealises, string prixTotal, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("Prenom", prenom);
            argumentsOfScenario.Add("Nom", nom);
            argumentsOfScenario.Add("Mot de passe", motDePasse);
            argumentsOfScenario.Add("Marque", marque);
            argumentsOfScenario.Add("Modèle", modele);
            argumentsOfScenario.Add("Plaque d\'immatriculation", plaqueDimmatriculation);
            argumentsOfScenario.Add("Couleur", couleur);
            argumentsOfScenario.Add("Kms estimés", kmsEstimes);
            argumentsOfScenario.Add("Retour", retour);
            argumentsOfScenario.Add("Kms Réalisés", kmsRealises);
            argumentsOfScenario.Add("Prix Total", prixTotal);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Réservation d\'un vehicule", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 27
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
#line 28
 testRunner.When(string.Format("connexion de l\'utilisateur \'{0}\' \'{1}\' \'{2}\'", prenom, nom, motDePasse), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 29
 testRunner.Given("Debut de location : \'2022-03-10\' Fin de location : \'2022-03-11\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 30
 testRunner.When("l\'utilisateur veut connaitre les reservations", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
                TechTalk.SpecFlow.Table table5 = new TechTalk.SpecFlow.Table(new string[] {
                            "Marque",
                            "Modèle",
                            "Plaque d\'immatriculation",
                            "Couleur",
                            "Prix de réservation",
                            "Prix au Km",
                            "Chevaux Fiscaux"});
                table5.AddRow(new string[] {
                            "Volkswagen",
                            "Golf",
                            "AA-456-AA",
                            "Bleu",
                            "50",
                            "0.15",
                            "6"});
                table5.AddRow(new string[] {
                            "Hyundai",
                            "Tucson",
                            "AA-789-AA",
                            "Noir",
                            "80",
                            "0.25",
                            "8"});
                table5.AddRow(new string[] {
                            "Ford",
                            "Mustang",
                            "AB-123-AA",
                            "Rouge",
                            "80",
                            "0.25",
                            "21"});
#line 31
 testRunner.Then("les véhicules disponibles sont", ((string)(null)), table5, "Then ");
#line hidden
#line 36
 testRunner.Given(string.Format("l\'utilisateur sélectionne le véhicule \'{0}\' \'{1}\' \'{2}\' \'{3}\'", marque, modele, plaqueDimmatriculation, couleur), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 37
 testRunner.And(string.Format("l\'utilisateur prévoie de faire \'{0}\' kms", kmsEstimes), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 38
 testRunner.When("l\'utilisateur valide", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 39
 testRunner.Then(string.Format("Resultat : \'{0}\'", retour), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 40
 testRunner.Given(string.Format("L\'utilisateur rend la voiture avec \'{0}\' kms", kmsRealises), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 41
 testRunner.Then(string.Format("le prix final est \'{0}\'", prixTotal), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Réservation d\'un vehicule, Variant 0", SourceLine=43)]
        public virtual void ReservationDunVehicule_Variant0()
        {
#line 27
this.ReservationDunVehicule("Tristan", "DA COSTA", "azerty", "Hyundai", "Tucson", "AA-789-AA", "Noir", "180", "Réservation autorisée", "150", "117.5", ((string[])(null)));
#line hidden
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Réservation d\'un vehicule, Variant 1", SourceLine=43)]
        public virtual void ReservationDunVehicule_Variant1()
        {
#line 27
this.ReservationDunVehicule("Tristan", "DA COSTA", "azerty", "Ford", "Mustang", "AB-123-AA", "Rouge", "180", "Réservation refusée", "0", "0", ((string[])(null)));
#line hidden
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Réservation d\'un vehicule, Variant 2", SourceLine=43)]
        public virtual void ReservationDunVehicule_Variant2()
        {
#line 27
this.ReservationDunVehicule("John", "Doe", "uiop", "Volkswagen", "Golf", "AA-456-AA", "Bleu", "200", "Réservation autorisée", "210", "82", ((string[])(null)));
#line hidden
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Réservation d\'un vehicule, Variant 3", SourceLine=43)]
        public virtual void ReservationDunVehicule_Variant3()
        {
#line 27
this.ReservationDunVehicule("John", "Doe", "uiop", "Ford", "Mustang", "AB-123-AA", "Rouge", "200", "Réservation autorisée", "180", "125", ((string[])(null)));
#line hidden
        }
    }
}
#pragma warning restore
#endregion
