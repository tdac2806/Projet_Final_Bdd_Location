// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.7.0.0
//      SpecFlow Generator Version:3.7.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace LocationTest.Features
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.7.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [TechTalk.SpecRun.FeatureAttribute("Vehicule", SourceFile="Features\\Vehicle.feature", SourceLine=0)]
    public partial class VehiculeFeature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
        private string[] _featureTags = ((string[])(null));
        
#line 1 "Vehicle.feature"
#line hidden
        
        [TechTalk.SpecRun.FeatureInitialize()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Features", "Vehicule", null, ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [TechTalk.SpecRun.FeatureCleanup()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        public virtual void TestInitialize()
        {
        }
        
        [TechTalk.SpecRun.ScenarioCleanup()]
        public virtual void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
        }
        
        public virtual void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        public virtual void FeatureBackground()
        {
#line 3
#line hidden
            TechTalk.SpecFlow.Table table6 = new TechTalk.SpecFlow.Table(new string[] {
                        "Marque",
                        "Modèle",
                        "Plaque d\'immatriculation",
                        "Couleur",
                        "Prix de réservation",
                        "Prix au Km",
                        "Chevaux Fiscaux",
                        "Reserver"});
            table6.AddRow(new string[] {
                        "Citroen",
                        "C4",
                        "AA-123-AA",
                        "Gris",
                        "50",
                        "0.12",
                        "7",
                        "true"});
            table6.AddRow(new string[] {
                        "Volkswagen",
                        "Golf",
                        "AA-456-AA",
                        "Bleu",
                        "50",
                        "0.15",
                        "6",
                        "false"});
            table6.AddRow(new string[] {
                        "Hyundai",
                        "Tucson",
                        "AA-789-AA",
                        "Noir",
                        "80",
                        "0.25",
                        "8",
                        "false"});
            table6.AddRow(new string[] {
                        "Ford",
                        "Mustang",
                        "AB-123-AA",
                        "Rouge",
                        "80",
                        "0.25",
                        "21",
                        "true"});
            table6.AddRow(new string[] {
                        "Audi",
                        "R8",
                        "AB-456-AA",
                        "Noir",
                        "100",
                        "1",
                        "50",
                        "false"});
            table6.AddRow(new string[] {
                        "Koenigsegg",
                        "Agera R",
                        "AB-789-AA",
                        "Blanc",
                        "200",
                        "8",
                        "139",
                        "false"});
#line 4
 testRunner.Given("Init Vehicule bdd", ((string)(null)), table6, "Given ");
#line hidden
        }
        
        public virtual void CreationVehicule(string marque, string modele, string plaqueDimmatriculation, string couleur, string prixDeReservation, string prixAuKm, string chevauxFiscaux, string reserver, string retour, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("Marque", marque);
            argumentsOfScenario.Add("Modèle", modele);
            argumentsOfScenario.Add("Plaque d\'immatriculation", plaqueDimmatriculation);
            argumentsOfScenario.Add("Couleur", couleur);
            argumentsOfScenario.Add("Prix de réservation", prixDeReservation);
            argumentsOfScenario.Add("Prix au Km", prixAuKm);
            argumentsOfScenario.Add("Chevaux Fiscaux", chevauxFiscaux);
            argumentsOfScenario.Add("Reserver", reserver);
            argumentsOfScenario.Add("Retour", retour);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Creation Vehicule", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 15
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
#line 16
 testRunner.When(string.Format("Creation d\'un Vehicule : \'{0}\' \'{1}\' \'{2}\' \'{3}\' \'{4}\' \'{5}\' \'{6}\' \'{7}\'", marque, modele, plaqueDimmatriculation, couleur, prixDeReservation, prixAuKm, chevauxFiscaux, reserver), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 17
 testRunner.Then(string.Format("Vehicule resultat : \'{0}\'", retour), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Creation Vehicule, Variant 0", SourceLine=19)]
        public virtual void CreationVehicule_Variant0()
        {
#line 15
this.CreationVehicule("Volkswagen", "Golf", "", "Bleu", "50", "0.15", "6", "false", "Le véhicule n\'a pas de plaque d\'immatriculation", ((string[])(null)));
#line hidden
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Creation Vehicule, Variant 1", SourceLine=19)]
        public virtual void CreationVehicule_Variant1()
        {
#line 15
this.CreationVehicule("Hyundai", "Tucson", "AA-789-AA", "Noir", "80", "0.25", "7", "false", "La plaque d\'immatriculation n\'est pas unique", ((string[])(null)));
#line hidden
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Creation Vehicule, Variant 2", SourceLine=19)]
        public virtual void CreationVehicule_Variant2()
        {
#line 15
this.CreationVehicule("Ford", "Mustang", "AC-123-AA", "", "80", "0.25", "21", "false", "Le véhicule n\'a pas de couleur", ((string[])(null)));
#line hidden
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Creation Vehicule, Variant 3", SourceLine=19)]
        public virtual void CreationVehicule_Variant3()
        {
#line 15
this.CreationVehicule("Ford", "Mustang", "AC-123-AA", "Rouge", "80", "0.25", "21", "false", "Vehicule Ajouté", ((string[])(null)));
#line hidden
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Creation Vehicule, Variant 4", SourceLine=19)]
        public virtual void CreationVehicule_Variant4()
        {
#line 15
this.CreationVehicule("", "R8", "AC-456-AA", "Noir", "100", "1", "50", "false", "Le véhicule n\'a pas de marque", ((string[])(null)));
#line hidden
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Creation Vehicule, Variant 5", SourceLine=19)]
        public virtual void CreationVehicule_Variant5()
        {
#line 15
this.CreationVehicule("Renault", "", "AC-789-AA", "Gris", "30", "0.10", "4", "false", "Le véhicule n\'a pas de modele", ((string[])(null)));
#line hidden
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Creation Vehicule, Variant 6", SourceLine=19)]
        public virtual void CreationVehicule_Variant6()
        {
#line 15
this.CreationVehicule("Koenigsegg", "Agera R", "AD-123-AA", "Blanc", "200", "", "139", "false", "Le véhicule n\'a pas de prix au kilomètre", ((string[])(null)));
#line hidden
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Creation Vehicule, Variant 7", SourceLine=19)]
        public virtual void CreationVehicule_Variant7()
        {
#line 15
this.CreationVehicule("Citroen", "C4", "AD-456-AA", "Gris", "50", "0.12", "", "false", "Le véhicule n\'a pas de chevaux fiscaux", ((string[])(null)));
#line hidden
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Creation Vehicule, Variant 8", SourceLine=19)]
        public virtual void CreationVehicule_Variant8()
        {
#line 15
this.CreationVehicule("Citroen", "C4", "AD-789-AA", "Gris", "", "0.12", "7", "false", "Le véhicule n\'a pas de prix de réservation", ((string[])(null)));
#line hidden
        }
        
        public virtual void VehiculeExists(string marque, string modele, string plaqueDimmatriculation, string couleur, string retour, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("Marque", marque);
            argumentsOfScenario.Add("Modèle", modele);
            argumentsOfScenario.Add("Plaque d\'immatriculation", plaqueDimmatriculation);
            argumentsOfScenario.Add("Couleur", couleur);
            argumentsOfScenario.Add("Retour", retour);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Véhicule exists", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 32
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
#line 33
 testRunner.When(string.Format("Recherche d\'un Vehicule : \'{0}\' \'{1}\' \'{2}\' \'{3}\'", marque, modele, plaqueDimmatriculation, couleur), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 34
 testRunner.Then(string.Format("Vehicule resultat : \'{0}\'", retour), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Véhicule exists, Renault", SourceLine=36)]
        public virtual void VehiculeExists_Renault()
        {
#line 32
this.VehiculeExists("Renault", "Twingo", "AZ-123-CD", "Gris", "Le véhicule n\'existe pas", ((string[])(null)));
#line hidden
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Véhicule exists, Volkswagen", SourceLine=36)]
        public virtual void VehiculeExists_Volkswagen()
        {
#line 32
this.VehiculeExists("Volkswagen", "Golf", "AA-456-AA", "Bleu", "Le véhicule existe", ((string[])(null)));
#line hidden
        }
    }
}
#pragma warning restore
#endregion
